<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruoyi.course.mapper.CourseRecordMapper">
    
    <resultMap type="CourseRecord" id="CourseRecordResult">
        <result property="id"    column="id"    />
        <result property="studentId"    column="student_id"    />
        <result property="courseId"    column="course_id"    />
        <result property="createBy"    column="create_by"    />
        <result property="createTime"    column="create_time"    />
        <result property="updateBy"    column="update_by"    />
        <result property="updateTime"    column="update_time"    />
        <result property="delFlag"    column="del_flag"    />
    </resultMap>
    <resultMap type="CourseRecordDTO" id="CourseRecordResultDTO">
        <result property="studentId"    column="student_id"    />
        <result property="studentName"    column="student_name"    />
        <result property="studentAvatar"    column="student_avatar"    />
    </resultMap>
    <resultMap type="CourseNumStatus" id="CourseRecordHasResult">
        <result property="id"    column="id"    />
        <result property="studentId"    column="student_id"    />
        <result property="courseId"    column="course_id"    />
        <result property="selectNum"    column="select_num"    />
        <result property="exists"    column="custom_id_exists"    />
    </resultMap>

    <sql id="selectCourseRecordVo">
        select cr.id,
               cr.student_id,
               cr.course_id,
               cr.create_by,
               cr.create_time,
               cr.update_by,
               cr.update_time,
               cr.del_flag,
               su.nick_name as student_name
        from course_record cr
        left join sys_user su on cr.student_id = su.user_id
    </sql>

    <select id="selectCourseRecordList" parameterType="CourseRecord" resultMap="CourseRecordResult">
        <include refid="selectCourseRecordVo"/>
        <where>  
            <if test="studentId != null "> and cr.student_id = #{studentId}</if>
            <if test="courseId != null "> and cr.course_id = #{courseId}</if>
             and cr.del_flag = 0
        </where>
    </select>
    
    <select id="selectCourseRecordById" parameterType="Long" resultMap="CourseRecordResult">
        <include refid="selectCourseRecordVo"/>
        where cr.id = #{id}
    </select>
    <select id="getCourseStudentNumber" resultMap="CourseRecordHasResult" parameterType="CourseNumStatus">
        SELECT
            id,
            IFNULL(count(student_id), 0) as select_num,
               CASE
                   WHEN EXISTS (SELECT 1 FROM course_record WHERE student_id = #{studentId} AND course_id = #{courseId})
                       THEN 'yes'
                ELSE 'no'
               END AS custom_id_exists
        FROM course_record
        where course_id = #{courseId} and del_flag = 0
        group by id
    </select>
    <select id="selectCourseRecordListApp" parameterType="CourseRecord" resultMap="CourseRecordResult" >
        <include refid="selectCourseRecordVo"/>
        <where>
            <if test="studentId != null ">and cr.student_id = #{studentId}</if>
            <if test="courseId != null ">and cr.course_id = #{courseId}</if>
            and cr.del_flag = 0
        </where>
    </select>
    <select id="selectCourseRecordCheckinStudent" parameterType="CourseRecord" resultMap="CourseRecordResultDTO" >
        select
        cr.student_id,
        su.nick_name as student_name,
        su.avatar as student_avatar
        from course_record cr
        left join sys_user su on cr.student_id = su.user_id
        left join sys_user_role sur on su.user_id = sur.user_id
        <where>
            <if test="studentId != null ">and cr.student_id = #{studentId}</if>
            <if test="courseId != null ">and cr.course_id = #{courseId}</if>
            and cr.del_flag = 0 and sur.role_id = 100
        </where>
    </select>
    <insert id="insertCourseRecord" parameterType="CourseRecord" useGeneratedKeys="true" keyProperty="id">
        insert into course_record
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="studentId != null">student_id,</if>
            <if test="courseId != null">course_id,</if>
            <if test="createBy != null">create_by,</if>
            <if test="createTime != null">create_time,</if>
            <if test="updateBy != null">update_by,</if>
            <if test="updateTime != null">update_time,</if>
            <if test="delFlag != null">del_flag,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="studentId != null">#{studentId},</if>
            <if test="courseId != null">#{courseId},</if>
            <if test="createBy != null">#{createBy},</if>
            <if test="createTime != null">#{createTime},</if>
            <if test="updateBy != null">#{updateBy},</if>
            <if test="updateTime != null">#{updateTime},</if>
            <if test="delFlag != null">#{delFlag},</if>
         </trim>
    </insert>
    <insert id="insertCourseRecordWithIds" parameterType="CourseRecord">
        insert into course_record (student_id,course_id) values
        <foreach item="record" index="index" collection="collection" open="(" separator="),(" close=")">
            #{record.studentId}, #{record.courseId}
        </foreach>
    </insert>

    <update id="updateCourseRecord" parameterType="CourseRecord">
        update course_record
        <trim prefix="SET" suffixOverrides=",">
            <if test="studentId != null">student_id = #{studentId},</if>
            <if test="courseId != null">course_id = #{courseId},</if>
            <if test="createBy != null">create_by = #{createBy},</if>
            <if test="createTime != null">create_time = #{createTime},</if>
            <if test="updateBy != null">update_by = #{updateBy},</if>
            <if test="updateTime != null">update_time = #{updateTime},</if>
            <if test="delFlag != null">del_flag = #{delFlag},</if>
        </trim>
        where id = #{id}
    </update>

    <delete id="deleteCourseRecordById" parameterType="Long">
        update course_record set del_flag = 1 where id = #{id}
    </delete>

    <delete id="deleteCourseRecordByIds" parameterType="String">
        update course_record set del_flag = 1 where id in
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>
</mapper>